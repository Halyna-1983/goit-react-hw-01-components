{"version":3,"sources":["components/AppBar/AppBar.js","components/Container/Container.js","components/Layout/Layout.js","components/Profile/Profile.js","components/Statistics/Statistics.js","components/FriendList/FriendListItem.js","components/FriendList/FriendList.js","components/Transactions/Transaction.js","components/Transactions/TransactionHistory.js","App.js","index.js"],"names":["AppBar","text","Container","children","className","Layout","Profile","avatar","name","tag","location","stats","followers","views","likes","src","alt","Statistics","title","map","item","id","label","percentage","defaultProps","status","marginLeft","marginRight","width","height","borderRadius","FriendsListItem","friends","isOnline","style","backgroundColor","prototype","PropTypes","bool","isRequired","string","FriendList","friend","Transaction","type","amount","currency","TransactionHistory","items","App","user","statisticalData","friendslist","transactions","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89f97ff5.chunk.js","sourcesContent":["import './AppBar.css';\r\n\r\nconst AppBar = ({ text }) => (\r\n  <header>\r\n    <h1>{text}</h1>\r\n  </header>\r\n);\r\n\r\nexport default AppBar;","import './Container.css';\r\n\r\nconst Container = ({ children }) => (\r\n\t<div className='Container'>{ children }</div>\r\n)\r\n\r\nexport default Container","import AppBar from '../AppBar/AppBar'\r\nimport Container from '../Container/Container'\r\n\r\nconst Layout = ({ children }) => \r\n(<>\r\n\t<AppBar text='HW-01-Components' />\r\n\t<Container>{children}</Container>\r\n\t</>\r\n)\r\n\r\nexport default Layout;","// Профиль социальной сети\r\n// Необходимо создать компонент <Profile>, с помощью которого мы могли бы отображать информацию \r\n// о пользователе социальной сети. Данные о пользователе лежат в файле user.json.\r\n\r\n// Описание компонента\r\n// Компонент должен принимать несколько пропсов с информацией о пользователе:\r\n\r\n// name — имя пользователя\r\n// tag — тег в социальной сети без @\r\n// location — город и страна\r\n// avatar — url на изображение\r\n// stats — объект с информацией об активности\r\n\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Profile.css';\r\n\r\n\r\nconst Profile = ({avatar, name, tag, location, stats: {followers, views, likes}}) => (\r\n        <div className=\"profile\">\r\n        <div className=\"description\">\r\n          <img\r\n            src={avatar}\r\n            alt=\"Аватар пользователя\"\r\n            className=\"avatar\"\r\n          />\r\n          <p className=\"name\">{name}</p>\r\n          <p className=\"tag\">@{tag}</p>\r\n          <p className=\"location\">{location}</p>\r\n        </div>\r\n      \r\n        <ul className=\"stats\">\r\n          <li className=\"statsItem\">\r\n            <span className=\"label\">Followers</span>\r\n            <span className=\"quantity\">{followers}</span>\r\n          </li>\r\n          <li className=\"statsItem\">\r\n            <span className=\"label\">Views</span>\r\n            <span className=\"quantity\">{views}</span>\r\n          </li>\r\n          <li className=\"statsItem\">\r\n            <span className=\"label\">Likes</span>\r\n            <span className=\"quantity\">{likes}</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n  );\r\n\r\n  Profile.propTypes = {\r\n    avatar: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    tag: PropTypes.string.isRequired,\r\n    location: PropTypes.string.isRequired,\r\n    followers: PropTypes.number,\r\n    views: PropTypes.number,\r\n    likes: PropTypes.number,\r\n};\r\n\r\n  export default Profile;","// Секция статистики\r\n// Создать компонет <Statistics>, который бы отображал статистику по переданным пропам.\r\n// К примеру загрузки в облако по типу файлов, посещение веб-страницы пользователями разных стран, финансовые траты и т. п.\r\n//  Данные о статистике лежат в файле statistical-data.json.\r\n\r\n//  Описание компонента\r\n//  Компонент должен принимать два пропа title и stats, в которых указывается заголовок и объект статистики.\r\n \r\n//  title - не обязателен, и если он не передан, не должна рендериться разметка заголовка <h2>.\r\n//  stats - массив объектов содержащих информацию о элементе статистики. Может иметь произвольное кол-во элементов.\r\n//  Цвет фона элемента статистики в оформлении можно пропустить, либо создать функцию для генерации случайного цвета.\r\n\r\n\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Statistics.css';\r\n\r\nconst Statistics = ({title, stats}) => {\r\n  return <section className= \"statistics\">\r\n\r\n    {title && <h2 className=\"statistics__title\">{title}</h2>}\r\n  \r\n    <ul className=\"statistics__list\">\r\n      {stats.map(item => {\r\n        const{id, label, percentage} = item\r\n        return <li className=\".statistics__item\" key={id} >\r\n        <span className=\"label\">{label}</span>\r\n        <span className=\"percentage\">{percentage}%</span>\r\n      </li>\r\n})}\r\n    </ul>\r\n  </section>\r\n};\r\n\r\nStatistics.defaultProps = {\r\n  title: 'Statistics:',\r\n};\r\n\r\n\r\nStatistics.propTypes = { \r\n  title: PropTypes.string, \r\n  stats: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      label: PropTypes.string.isRequired,\r\n      percentage: PropTypes.number.isRequired,\r\n    }),\r\n  ).isRequired,\r\n};\r\n\r\nexport default Statistics;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './FriendListItem.css';\r\n// import defaultImg from './defaultImg.jpg';\r\n\r\nconst status = {\r\n    options: {\r\n        marginLeft: 15,\r\n        marginRight: 15,\r\n        width: 30,\r\n        height: 30,\r\n        borderRadius: '50%',\r\n    }\r\n};\r\n\r\nconst FriendsListItem = friends => {\r\n    const{avatar, name, isOnline} = friends\r\n    return (\r\n    <>\r\n         <span style={{...status.options, backgroundColor: isOnline === true ?  'green' : 'red'}} /> \r\n        <img className=\"avatar\" src={avatar} alt=\"\" width=\"48\" />\r\n        <p className=\"name\">{name}</p>\r\n    </>\r\n    )\r\n}\r\n\r\n// FriendListItem.defaultProps = {\r\n//     avatar: defaultImg,\r\n//   };\r\n\r\nFriendsListItem.prototype = {\r\nisOnline: PropTypes.bool.isRequired,\r\nname: PropTypes.string.isRequired,\r\navatar: PropTypes.string,\r\n}\r\n\r\nexport default FriendsListItem;","// Список друзей\r\n// Необходимо создать компонент <FriendList>, с помощью которого мы могли бы отображать информацию о друзьях пользователя. \r\n// Информация о друзьях хранится в файле friends.json.\r\n\r\n// Описание компонента FriendList\r\n// Компонент должен принимать один проп friends - массив объектов друзей.\r\n\r\n// Компонент должен создавать DOM следующей структуры.\r\n\r\n// <ul class=\"friend-list\">\r\n//   <!-- Произвольное кол-во FriendListItem, в зависимости от кол-ва объектов в массиве -->\r\n// </ul>\r\n// Описание компонента FriendListItem\r\n// Компонент должен принимать несколько пропов:\r\n\r\n// avatar - ссылка на аватар\r\n// name - имя друга\r\n// isOnline - буль сигнализирующий о состоянии друга, в сети или нет.\r\n// В зависимости от пропа isOnline, должен меняться цвет фона span.status. Это можно сделать через разный CSS-класс \r\n// или Styled Components.\r\n\r\nimport React from 'react';\r\n//import PropTypes from 'prop-types';\r\nimport FriendsListItem from './FriendListItem';\r\nimport './FriendListItem.css';\r\n\r\nconst FriendList = ({friends}) => (\r\n\r\n<ul className=\"friendList\">\r\n\r\n{friends.map(friend => (\r\n    <li className=\"item\" key={friend.id}>\r\n    <FriendsListItem \r\n    isOnline = {friend.isOnline}\r\n    avatar = {friend.avatar}\r\n    name = {friend.name}\r\n    />\r\n    </li>\r\n    ))}\r\n    </ul>\r\n)\r\n\r\n// FriendList.propTypes = {\r\n//     isOnline: PropTypes.string,\r\n//     avatar: PropTypes.string.isRequired,\r\n//     name: PropTypes.string.isRequired,\r\n// }\r\n\r\nexport default FriendList;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Transaction.css';\r\n\r\nconst Transaction = ({type, amount, currency}) => (\r\n    <>\r\n      <td>{type}</td>\r\n      <td>{amount}</td>\r\n      <td>{currency}</td>\r\n    </>\r\n)\r\n\r\nTransaction.propTypes = {\r\n  type: PropTypes.string.isRequired,\r\n  amount: PropTypes.string.isRequired,\r\n  currency: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Transaction;","// История транзакций\r\n// Необходимо создать компонент истории транзакций в личном кабинете интернет банка.\r\n\r\n// Превью компонента TransactionHistory\r\n\r\n// Данные для списка доступны в формате JSON в файле transactions.json. Это массив объектов, \r\n// каждый объект описывает одну транзакцию со следующими свойствами:\r\n\r\n// id — уникальный идентификатор транзакции\r\n// type — тип транзакции\r\n// amount - сумма транзакции\r\n// currency - тип валюты\r\n// Описание компонента\r\n// Необходимо создать компонент <TransactionHistory> принимающий один проп items - массив объектов транзакций \r\n// из transactions.json. Компонент создает разметку таблицы. Каждая транзакция это строка таблицы. \r\n// В примере приведена разметка двух транзакций.\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Transaction from './Transaction';\r\n\r\n\r\nconst TransactionHistory = ({items}) => (\r\n<table className=\"transaction-history\">\r\n  <thead>\r\n    <tr>\r\n      <th>Type</th>\r\n      <th>Amount</th>\r\n      <th>Currency</th>\r\n    </tr>\r\n  </thead>\r\n\r\n  <tbody>\r\n      {items.map(item => {\r\n          const {type, amount, currency, id} = item\r\n          return <tr key = {id} ><Transaction \r\n          type={type}\r\n          amount={amount}\r\n          currency={currency}\r\n          id={id}\r\n          />\r\n        </tr>\r\n      })}\r\n      \r\n  </tbody>\r\n</table>\r\n)\r\n\r\nTransactionHistory.propTypes = {\r\nitems: PropTypes.arrayOf(\r\n    PropTypes.shape({id: PropTypes.string.isRequired}).isRequired\r\n).isRequired\r\n}\r\n\r\nexport default TransactionHistory;","import React from 'react';\n\n// компоненти\nimport Layout from './components/Layout/Layout'\n\nimport user from './data/user.json';\nimport Profile from './components/Profile/Profile';\nimport statisticalData from './data/statistical-data.json';\nimport Statistics from './components/Statistics/Statistics';\nimport friendslist from './data/friends.json';\nimport FriendList from './components/FriendList/FriendList';\n//import FriendsListItem from './components/FriendListItem';\nimport transactions from './data/transactions.json';\nimport TransactionHistory from './components/Transactions/TransactionHistory';\n\n\nconst App = () => (\n  <Layout>\n      <h2>Завдання 1 - Profile</h2>\n     <Profile \n     name={user.name} \n     tag={user.tag}\n     location={user.location}\n     avatar={user.avatar}\n     stats={user.stats}/>\n\n     <h2>Завдання 2 - Statistics</h2>\n\n     <Statistics \n     title=\"Upload stats\" \n     stats={statisticalData} />\n     \n     <h2>Завдання 3 - FriendList</h2>\n\n     <FriendList \n     friends={friendslist} />\n\n    <h2>Завдання 4 - Transactions</h2>\n\n    <TransactionHistory \n    items={transactions} />\n    \n    </Layout>\n  );\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}